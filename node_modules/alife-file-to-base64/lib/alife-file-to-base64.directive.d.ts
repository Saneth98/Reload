import { EventEmitter, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class AlifeFileToBase64Directive {
    private elementRef;
    type: string;
    fileModel: any;
    rawFileModel: any;
    onFileChanged: EventEmitter<any>;
    fileModelChange: EventEmitter<any>;
    rawFileModelChange: EventEmitter<any>;
    isTypeFile: boolean;
    userCapture: boolean;
    globalFilesData: any;
    globalRawFilesData: any;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    /**
     * Initialize the action
     */
    init(): void;
    /**
     * Fire the events
     */
    onFileReadingCompleted(): void;
    /**
     *
     * Read the files and prepare the output json with base64.
     *
     * @param event
     */
    handleFileSelection(event: any): void;
    /**
     * Add Event listener action on input
     */
    bindFileChangeAction(): void;
    /**
     * Remove Event listener action on input
     */
    removeFileChangeAction(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AlifeFileToBase64Directive, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AlifeFileToBase64Directive, "[alife-file-to-base64]", never, { "type": "type"; "fileModel": "fileModel"; "rawFileModel": "rawFileModel"; }, { "onFileChanged": "onFileChanged"; "fileModelChange": "fileModelChange"; "rawFileModelChange": "rawFileModelChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpZmUtZmlsZS10by1iYXNlNjQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImFsaWZlLWZpbGUtdG8tYmFzZTY0LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbGlmZUZpbGVUb0Jhc2U2NERpcmVjdGl2ZSB7XHJcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICBmaWxlTW9kZWw6IGFueTtcclxuICAgIHJhd0ZpbGVNb2RlbDogYW55O1xyXG4gICAgb25GaWxlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBmaWxlTW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgcmF3RmlsZU1vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGlzVHlwZUZpbGU6IGJvb2xlYW47XHJcbiAgICB1c2VyQ2FwdHVyZTogYm9vbGVhbjtcclxuICAgIGdsb2JhbEZpbGVzRGF0YTogYW55O1xyXG4gICAgZ2xvYmFsUmF3RmlsZXNEYXRhOiBhbnk7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgdGhlIGFjdGlvblxyXG4gICAgICovXHJcbiAgICBpbml0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZpcmUgdGhlIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICBvbkZpbGVSZWFkaW5nQ29tcGxldGVkKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBSZWFkIHRoZSBmaWxlcyBhbmQgcHJlcGFyZSB0aGUgb3V0cHV0IGpzb24gd2l0aCBiYXNlNjQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUZpbGVTZWxlY3Rpb24oZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBFdmVudCBsaXN0ZW5lciBhY3Rpb24gb24gaW5wdXRcclxuICAgICAqL1xyXG4gICAgYmluZEZpbGVDaGFuZ2VBY3Rpb24oKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIEV2ZW50IGxpc3RlbmVyIGFjdGlvbiBvbiBpbnB1dFxyXG4gICAgICovXHJcbiAgICByZW1vdmVGaWxlQ2hhbmdlQWN0aW9uKCk6IHZvaWQ7XHJcbn1cclxuIl19