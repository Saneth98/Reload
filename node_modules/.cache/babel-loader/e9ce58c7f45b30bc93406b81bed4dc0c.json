{"ast":null,"code":"import { Directive, EventEmitter, ElementRef, Input, Output, NgModule } from '@angular/core';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass AlifeFileToBase64Directive {\n  /**\r\n   * @param {?} elementRef\r\n   */\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.onFileChanged = new EventEmitter();\n    this.fileModelChange = new EventEmitter();\n    this.rawFileModelChange = new EventEmitter();\n    this.isTypeFile = false;\n    this.userCapture = false;\n    this.globalFilesData = [];\n    this.globalRawFilesData = [];\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  ngOnInit() {\n    this.isTypeFile = this.type === 'file';\n    this.init();\n  }\n  /**\r\n   * Initialize the action\r\n   * @return {?}\r\n   */\n\n\n  init() {\n    if (!this.isTypeFile) {\n      console.error(\"alife-file-to-base64 will work only when input type is file.\");\n      this.removeFileChangeAction();\n      return;\n    } // // Check for the various File API support.\n    // if (window.File && window.FileReader && window.FileList && window.Blob) {\n    //   // Great success! All the File APIs are supported.\n    // } else {\n    //   alert('The File APIs are not fully supported in this browser.');\n    // }\n\n\n    this.bindFileChangeAction();\n  }\n  /**\r\n   * Fire the events\r\n   * @return {?}\r\n   */\n\n\n  onFileReadingCompleted() {\n    this.fileModelChange.next(this.globalFilesData);\n    this.rawFileModelChange.next(this.globalRawFilesData);\n    this.onFileChanged.next(this.globalFilesData);\n  }\n  /**\r\n   *\r\n   * Read the files and prepare the output json with base64.\r\n   *\r\n   * @param {?} event\r\n   * @return {?}\r\n   */\n\n\n  handleFileSelection(event) {\n    if (!this.isTypeFile) {\n      return;\n    }\n    /** @type {?} */\n\n\n    let files = event.target.files;\n    this.globalRawFilesData = files;\n    /** @type {?} */\n\n    let fileOutput = [];\n\n    for (let i = 0; i < files.length; i++) {\n      /** @type {?} */\n      let file = files[i];\n      /** @type {?} */\n\n      let opt = {\n        name: file.name,\n        size: file.size,\n        type: file.type\n      };\n      fileOutput.push(opt);\n    }\n    /** @type {?} */\n\n\n    var that = this;\n    /**\r\n     * @return {?}\r\n     */\n\n    function fileReadingCompleted() {\n      that.globalFilesData = fileOutput;\n      that.onFileReadingCompleted();\n    }\n    /** @type {?} */\n\n\n    var reader = new FileReader();\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n    function readFile(index) {\n      reader.onload = function (fileData) {\n        /** @type {?} */\n        let base64 = fileData.target.result;\n        fileOutput[index].base64 = base64;\n        readFile(index + 1);\n      };\n\n      if (index >= files.length) {\n        fileReadingCompleted();\n        return;\n      }\n\n      reader.readAsDataURL(files[index]);\n    }\n\n    readFile(0);\n  }\n  /**\r\n   * Add Event listener action on input\r\n   * @return {?}\r\n   */\n\n\n  bindFileChangeAction() {\n    this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\n  }\n  /**\r\n   * Remove Event listener action on input\r\n   * @return {?}\r\n   */\n\n\n  removeFileChangeAction() {\n    this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\n  }\n\n}\n\nAlifeFileToBase64Directive.ɵfac = function AlifeFileToBase64Directive_Factory(t) {\n  return new (t || AlifeFileToBase64Directive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nAlifeFileToBase64Directive.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AlifeFileToBase64Directive,\n  selectors: [[\"\", \"alife-file-to-base64\", \"\"]],\n  inputs: {\n    type: \"type\",\n    fileModel: \"fileModel\",\n    rawFileModel: \"rawFileModel\"\n  },\n  outputs: {\n    onFileChanged: \"onFileChanged\",\n    fileModelChange: \"fileModelChange\",\n    rawFileModelChange: \"rawFileModelChange\"\n  }\n});\n/** @nocollapse */\n\nAlifeFileToBase64Directive.ctorParameters = () => [{\n  type: ElementRef\n}];\n\nAlifeFileToBase64Directive.propDecorators = {\n  type: [{\n    type: Input\n  }],\n  fileModel: [{\n    type: Input\n  }],\n  rawFileModel: [{\n    type: Input\n  }],\n  onFileChanged: [{\n    type: Output\n  }],\n  fileModelChange: [{\n    type: Output\n  }],\n  rawFileModelChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AlifeFileToBase64Directive, [{\n    type: Directive,\n    args: [{\n      selector: '[alife-file-to-base64]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    onFileChanged: [{\n      type: Output\n    }],\n    fileModelChange: [{\n      type: Output\n    }],\n    rawFileModelChange: [{\n      type: Output\n    }],\n    type: [{\n      type: Input\n    }],\n    fileModel: [{\n      type: Input\n    }],\n    rawFileModel: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nclass AlifeFileToBase64Module {}\n\nAlifeFileToBase64Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AlifeFileToBase64Module\n});\nAlifeFileToBase64Module.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AlifeFileToBase64Module_Factory(t) {\n    return new (t || AlifeFileToBase64Module)();\n  },\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AlifeFileToBase64Module, {\n    declarations: [AlifeFileToBase64Directive],\n    exports: [AlifeFileToBase64Directive]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AlifeFileToBase64Module, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [AlifeFileToBase64Directive],\n      exports: [AlifeFileToBase64Directive]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { AlifeFileToBase64Module, AlifeFileToBase64Directive as ɵa };","map":{"version":3,"sources":["ng:/alife-file-to-base64/lib/alife-file-to-base64.directive.ts","ng:/alife-file-to-base64/lib/alife-file-to-base64.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, EventEmitter, ElementRef, Input, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[alife-file-to-base64]'\r\n})\r\nexport class AlifeFileToBase64Directive {\r\n\r\n  @Input() type: string;\r\n  @Input() fileModel: any;\r\n  @Input() rawFileModel: any;\r\n\r\n  @Output() onFileChanged: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() fileModelChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() rawFileModelChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  isTypeFile: boolean = false;\r\n  userCapture: boolean = false;\r\n\r\n  globalFilesData: any = [];\r\n  globalRawFilesData: any = [];\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    this.isTypeFile = this.type === 'file';\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize the action\r\n   */\r\n  init() {\r\n    if (!this.isTypeFile) {\r\n      console.error(\"alife-file-to-base64 will work only when input type is file.\");\r\n      this.removeFileChangeAction();\r\n      return;\r\n    }\r\n    // // Check for the various File API support.\r\n    // if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n    //   // Great success! All the File APIs are supported.\r\n    // } else {\r\n    //   alert('The File APIs are not fully supported in this browser.');\r\n    // }\r\n    this.bindFileChangeAction();\r\n  }\r\n\r\n  /**\r\n   * Fire the events\r\n   */\r\n  onFileReadingCompleted() {\r\n    this.fileModelChange.next(this.globalFilesData);\r\n    this.rawFileModelChange.next(this.globalRawFilesData);\r\n    this.onFileChanged.next(this.globalFilesData);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Read the files and prepare the output json with base64.\r\n   * \r\n   * @param event\r\n   */\r\n  handleFileSelection(event) {\r\n\r\n    if (!this.isTypeFile) {\r\n      return;\r\n    }\r\n\r\n    let files = event.target.files;\r\n    this.globalRawFilesData = files;\r\n\r\n    let fileOutput = [];\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let file = files[i];\r\n      let opt = {\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type\r\n      }\r\n      fileOutput.push(opt);\r\n    }\r\n\r\n\r\n    var that = this;\r\n    function fileReadingCompleted() {\r\n      that.globalFilesData = fileOutput;\r\n      that.onFileReadingCompleted();\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    function readFile(index) {\r\n\r\n      reader.onload = (function (fileData: any) {\r\n        let base64 = fileData.target.result;\r\n        fileOutput[index].base64 = base64;\r\n        readFile(index + 1);\r\n      });\r\n\r\n      if (index >= files.length) {\r\n        fileReadingCompleted();\r\n        return;\r\n      }\r\n      reader.readAsDataURL(files[index]);\r\n    }\r\n\r\n    readFile(0);\r\n\r\n  }\r\n\r\n  /**\r\n   * Add Event listener action on input \r\n   */\r\n  bindFileChangeAction() {\r\n    this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\r\n  }\r\n\r\n  /**\r\n   * Remove Event listener action on input \r\n   */\r\n  removeFileChangeAction() {\r\n    this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AlifeFileToBase64Directive } from './alife-file-to-base64.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [AlifeFileToBase64Directive],\r\n  exports: [AlifeFileToBase64Directive]\r\n})\r\nexport class AlifeFileToBase64Module { }\r\n"]},"metadata":{},"sourceType":"module"}