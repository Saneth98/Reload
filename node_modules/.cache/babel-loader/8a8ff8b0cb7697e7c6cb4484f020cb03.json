{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class ValidateService {\n  isAuthorized() {\n    if (sessionStorage.getItem('loginType') === '1' || sessionStorage.getItem('loginType') === '2' || localStorage.getItem('loginType') === '1' || localStorage.getItem('loginType') === '2') {\n      return true;\n    }\n\n    return !!this.user;\n  }\n\n  hasRole(role) {\n    let type;\n\n    if (localStorage.getItem('loginType') !== '') {\n      type = localStorage.getItem('loginType');\n    } else {\n      type = sessionStorage.getItem('loginType');\n    }\n\n    const val = +type;\n    return this.isAuthorized() && val === role;\n  }\n\n  login() {\n    let type;\n\n    if (localStorage.getItem('loginType') !== '') {\n      type = localStorage.getItem('loginType');\n    }\n\n    type = sessionStorage.getItem('loginType');\n    const val = +type;\n    this.user = {\n      Role: val\n    };\n  }\n\n  logout() {\n    this.user = null;\n    sessionStorage.setItem('loginType', '');\n    localStorage.setItem('loginType', '');\n  }\n\n}\n\nValidateService.ɵfac = function ValidateService_Factory(t) {\n  return new (t || ValidateService)();\n};\n\nValidateService.ɵprov = i0.ɵɵdefineInjectable({\n  token: ValidateService,\n  factory: ValidateService.ɵfac,\n  providedIn: 'root'\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(ValidateService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();","map":{"version":3,"sources":["D:\\Sample Tests\\Reload\\src\\app\\services\\validate.service.ts"],"names":[],"mappings":"AAAA,SAAQ,UAAR,QAAyB,eAAzB;;AAQA,OAAM,MAAO,eAAP,CAAsB;AAG1B,EAAA,YAAY,GAAA;AACV,QAAI,cAAc,CAAC,OAAf,CAAuB,WAAvB,MAAwC,GAAxC,IAA+C,cAAc,CAAC,OAAf,CAAuB,WAAvB,MAAwC,GAAvF,IACF,YAAY,CAAC,OAAb,CAAqB,WAArB,MAAsC,GADpC,IAC2C,YAAY,CAAC,OAAb,CAAqB,WAArB,MAAsC,GADrF,EAC0F;AACxF,aAAO,IAAP;AACD;;AACD,WAAO,CAAC,CAAC,KAAK,IAAd;AACD;;AAED,EAAA,OAAO,CAAC,IAAD,EAAW;AAChB,QAAI,IAAJ;;AACA,QAAI,YAAY,CAAC,OAAb,CAAqB,WAArB,MAAsC,EAA1C,EAA8C;AAC5C,MAAA,IAAI,GAAG,YAAY,CAAC,OAAb,CAAqB,WAArB,CAAP;AACD,KAFD,MAEO;AACL,MAAA,IAAI,GAAG,cAAc,CAAC,OAAf,CAAuB,WAAvB,CAAP;AACD;;AACD,UAAM,GAAG,GAAG,CAAC,IAAb;AACA,WAAO,KAAK,YAAL,MAAuB,GAAG,KAAK,IAAtC;AACD;;AAED,EAAA,KAAK,GAAA;AACH,QAAI,IAAJ;;AACA,QAAI,YAAY,CAAC,OAAb,CAAqB,WAArB,MAAsC,EAA1C,EAA8C;AAC5C,MAAA,IAAI,GAAG,YAAY,CAAC,OAAb,CAAqB,WAArB,CAAP;AACD;;AACD,IAAA,IAAI,GAAG,cAAc,CAAC,OAAf,CAAuB,WAAvB,CAAP;AACA,UAAM,GAAG,GAAG,CAAC,IAAb;AACA,SAAK,IAAL,GAAY;AAAC,MAAA,IAAI,EAAE;AAAP,KAAZ;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,SAAK,IAAL,GAAY,IAAZ;AACA,IAAA,cAAc,CAAC,OAAf,CAAuB,WAAvB,EAAoC,EAApC;AACA,IAAA,YAAY,CAAC,OAAb,CAAqB,WAArB,EAAkC,EAAlC;AACD;;AApCyB;;;mBAAf,e;AAAe,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EAHd;;;;;uBAGD,e,EAAe,CAAA;UAJ3B,UAI2B;WAJhB;AACV,MAAA,UAAU,EAAE;AADF,K;AAIgB,GAAA,C","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Role} from '../models/role';\nimport {User} from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ValidateService {\n  private user: User;\n\n  isAuthorized() {\n    if (sessionStorage.getItem('loginType') === '1' || sessionStorage.getItem('loginType') === '2' ||\n      localStorage.getItem('loginType') === '1' || localStorage.getItem('loginType') === '2') {\n      return true;\n    }\n    return !!this.user;\n  }\n\n  hasRole(role: Role) {\n    let type;\n    if (localStorage.getItem('loginType') !== '') {\n      type = localStorage.getItem('loginType');\n    } else {\n      type = sessionStorage.getItem('loginType');\n    }\n    const val = +type;\n    return this.isAuthorized() && val === role;\n  }\n\n  login() {\n    let type;\n    if (localStorage.getItem('loginType') !== '') {\n      type = localStorage.getItem('loginType');\n    }\n    type = sessionStorage.getItem('loginType');\n    const val = +type;\n    this.user = {Role: val};\n  }\n\n  logout() {\n    this.user = null;\n    sessionStorage.setItem('loginType', '');\n    localStorage.setItem('loginType', '');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}