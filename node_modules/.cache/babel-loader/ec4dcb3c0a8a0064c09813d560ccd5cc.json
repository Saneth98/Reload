{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./services/validate.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n\n  canActivate(route) {\n    if (!this.authService.isAuthorized()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n\n    const roles = route.data.roles;\n\n    if (roles && !roles.some(r => this.authService.hasRole(r))) {\n      this.router.navigate(['error', 'not-found']);\n      return false;\n    }\n\n    return true;\n  }\n\n  canLoad(route) {\n    if (!this.authService.isAuthorized()) {\n      return false;\n    }\n\n    const roles = route.data && route.data.roles;\n\n    if (roles && !roles.some(r => this.authService.hasRole(r))) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ValidateService));\n};\n\nAuthGuard.ɵprov = i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.ValidateService\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["D:\\Sample Tests\\Reload\\src\\app\\auth.guard.ts"],"names":[],"mappings":"AAAA,SAAQ,UAAR,QAAyB,eAAzB;;;;AASA,OAAM,MAAO,SAAP,CAAgB;AACpB,EAAA,WAAA,CACU,MADV,EAEU,WAFV,EAEsC;AAD5B,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,WAAA,GAAA,WAAA;AAET;;AAED,EAAA,WAAW,CAAC,KAAD,EAA8B;AACvC,QAAI,CAAC,KAAK,WAAL,CAAiB,YAAjB,EAAL,EAAsC;AACpC,WAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACA,aAAO,KAAP;AACD;;AAED,UAAM,KAAK,GAAG,KAAK,CAAC,IAAN,CAAW,KAAzB;;AACA,QAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAAN,CAAW,CAAC,IAAI,KAAK,WAAL,CAAiB,OAAjB,CAAyB,CAAzB,CAAhB,CAAd,EAA4D;AAC1D,WAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,OAAD,EAAU,WAAV,CAArB;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,EAAA,OAAO,CAAC,KAAD,EAAa;AAClB,QAAI,CAAC,KAAK,WAAL,CAAiB,YAAjB,EAAL,EAAsC;AACpC,aAAO,KAAP;AACD;;AAED,UAAM,KAAK,GAAG,KAAK,CAAC,IAAN,IAAc,KAAK,CAAC,IAAN,CAAW,KAAvC;;AACA,QAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAAN,CAAW,CAAC,IAAI,KAAK,WAAL,CAAiB,OAAjB,CAAyB,CAAzB,CAAhB,CAAd,EAA4D;AAC1D,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAjCmB;;;mBAAT,S,EAAS,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,eAAA,C;AAAA,C;;;SAAT,S;AAAS,EAAA,OAAA,EAAT,SAAS,CAAA,I;AAAA,EAAA,UAAA,EAFR;;;;;uBAED,S,EAAS,CAAA;UAHrB,UAGqB;WAHV;AACV,MAAA,UAAU,EAAE;AADF,K;AAGU,GAAA,C","sourcesContent":["import {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router, Route} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {Role} from './models/role';\nimport {ValidateService} from './services/validate.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private authService: ValidateService\n  ) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (!this.authService.isAuthorized()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n\n    const roles = route.data.roles as Role[];\n    if (roles && !roles.some(r => this.authService.hasRole(r))) {\n      this.router.navigate(['error', 'not-found']);\n      return false;\n    }\n\n    return true;\n  }\n\n  canLoad(route: Route): Observable<boolean> | Promise<boolean> | boolean {\n    if (!this.authService.isAuthorized()) {\n      return false;\n    }\n\n    const roles = route.data && route.data.roles as Role[];\n    if (roles && !roles.some(r => this.authService.hasRole(r))) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}